@startuml code_diagram_raster_operations
title Raster Operations Component
package inference {
abstract class BaseInferenceCallback {
    +{abstract} __call__(payload: bytes): bytes
}
}
package models {
class Raster {
    -content: bytes
    -size: HeightWidth
    -dtype: str
    -crs: int
    -bands: list[int]
    -resolution: float
    -geometry: Polygon
    -padding_size: HeightWidth
}

class Vector {
    -geometry: BaseGeometry
    -crs: int
    -pixel_value: int
}
}


package raster_op {
abstract class RasterOperationStrategy {
    +{abstract} execute(rasters: Iterable[Raster]): Generator[Raster, None, None]
}
RasterOperationStrategy ..> models.Raster : uses

abstract class RasterToVectorStrategy {
    +{abstract} execute(rasters: Raster): Generator[Vector, None, None]
}
RasterToVectorStrategy ..> models.Raster : uses
RasterToVectorStrategy ..> models.Vector : uses




package rasterio_impl{
    note "Uses Rasterio Library" as rasterio_note
class RasterioRemoveBand {
    -band: int
    -band_index: int
    +execute(rasters: Iterable[Raster]): Generator[Raster, None, None]
}
RasterioRemoveBand --|> RasterOperationStrategy

class RasterioInference {
    inference_func: BaseInferenceCallback
    +execute(rasters: Iterable[Raster]): Generator[Raster, None, None]
}

RasterioInference --|> RasterOperationStrategy
RasterioInference ..> BaseInferenceCallback : needs

class RasterioDtypeConversion {
    -dtype: str
    -np_dtype: np.dtype
    +execute(rasters: Iterable[Raster]): Generator[Raster, None, None]
    +_scale(image: np.ndarray): np.ndarray
}

RasterioDtypeConversion --|> RasterOperationStrategy



class RasterioRasterMerge {
    -offset: int
    -merge_method: Union[str, Callable]
    -bands: Optional[list[int]]
    +execute(rasters: Iterable[Raster]): Generator[Raster, None, None]

}

RasterioRasterMerge --|> RasterOperationStrategy

class RasterioRasterPad {
    -padding: int
    -divisible_by: int
    +execute(rasters: Iterable[Raster]): Generator[Raster, None, None]
    }
class RasterioRasterUnpad {
    +execute(rasters: Iterable[Raster]): Generator[Raster, None, None]
}
RasterioRasterPad --|> RasterOperationStrategy
RasterioRasterUnpad --|> RasterOperationStrategy

class RasterioRasterReproject {
    -target_crs: int
    -target_bands: Optional[Iterable[int]]
    -resample_alg: str
    +execute(rasters: Iterable[Raster]): Generator[Raster, None, None]

}
RasterioRasterReproject --|> RasterOperationStrategy

class RasterioRasterSplit {
    -image_size: HeightWidth
    -offset: int
    +execute(rasters: Iterable[Raster]): Generator[Raster, None, None]
}

RasterioRasterSplit --|> RasterOperationStrategy


    class RasterioRasterToVector {
    -band: int
    -threshold: int
    +execute(raster: Raster): Generator[Vector, None, None]
}
RasterioRasterToVector --|> RasterToVectorStrategy

}
}
@enduml
